apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: odoo-base
    tier: frontend
    cattle.io/creator: norman
    workload.user.cattle.io/workloadselector: deployment-default-odoo-base
  name: odoo-base
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      workload.user.cattle.io/workloadselector: deployment-default-odoo-base
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      annotations:
        field.cattle.io/ports: '[[]]'
      creationTimestamp: null
      labels:
        workload.user.cattle.io/workloadselector: deployment-default-odoo-base
    spec:
      initContainers:
      - command:
        - sh
        - -c
        - until pg_isready -h db-base -p 5432; do echo waiting for database; sleep
          2; done;
        image: postgres:9.6.5
        imagePullPolicy: IfNotPresent
        name: check-db-ready
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      - command:
        - sh
        - -c
        - 'if psql -h db-base -U odoo -p 5432 -lqt | cut -d \| -f 1 | grep -qw "base";
          then echo "The database base exists." else until createdb -h db-base
          -U odoo -p 5432 base; fi '
        env:
        - name: POSTGRES_DB
          value: postgres
        - name: PGPASSWORD
          value: odoo
        - name: POSTGRES_USER
          value: odoo
        image: postgres:9.6.5
        imagePullPolicy: IfNotPresent
        name: db-install
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      - command:
        - sh
        - -c
        - |
          FTP_HOST="ss.vps50988.mylogin.co"
          FTP_USER="odoo_ss.vps50988.mylogin.co"
          FTP_PASSWORD="i24125114A"
          FTP_REMOTE_FILE="dump.sql"
          FTP_REMOTE_FILESTORE="odoo17-basic.zip"
          LOCAL_HOST="db-base"
          LOCAL_USER="odoo"
          LOCAL_DATABASE="base"
          LOCAL_DUMP_FILE="odoo17-basic.zip"

          echo "Entering odoo directory...."
          cd /mnt/
          echo "Creating filestore directory..."
          mkdir filestore
          mkdir addons
          echo "Creating $LOCAL_DATABASE directory..."
          mkdir filestore/$LOCAL_DATABASE
          echo "Downloading filestore files..."
          cd addons/
          wget -P ./ "ftp://$FTP_USER:$FTP_PASSWORD@$FTP_HOST/$FTP_REMOTE_FILESTORE"
          echo "Extracting archive..."
          unzip $LOCAL_DUMP_FILE
          echo "Move files from directory"
          mv filestore/* /mnt/filestore/$LOCAL_DATABASE
          mv dump.sql /mnt/
          echo "List items in odoo directory..."
          ls /mnt/
          echo "List contents in filestore directory..."
          ls /mnt/filestore/$LOCAL_DATABASE/

          echo "Setting directory permissions..."
          chmod -Rv 777 /mnt/filestore
          echo "Permissions set..."
            
        #  fi
        image: busybox
        imagePullPolicy: IfNotPresent
        name: filestore-restored
        volumeMounts:
        # Edit the volume to match the existing mountPaths in the cluster
        - mountPath: /mnt
          name: vol-7xe3r
          subPath: odoo
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      - command:
        - sh
        - -c
        - |
          LOCAL_HOST="db-base"
          LOCAL_USER="odoo"
          LOCAL_DATABASE="base"
          LOCAL_DUMP_FILE="odoo-basic.dump"

          if ! PGPASSWORD="odoo" psql -h db-base -U odoo -d base -c "SELECT 1 FROM information_schema.tables WHERE table_name = 'res_users'" | grep -q 1; then
            echo "The res_users table doesn't exist in the base database. Proceeding with database restore..."

            echo "Entering odoo directory..."
            cd /var/lib/odoo/addons/
            echo "List contents of odoo directory..."
            ls /var/lib/odoo/addons/

            echo "Restoring database dump locally..."
            if PGPASSWORD="odoo" createdb -h "$LOCAL_HOST" -U "$LOCAL_USER" -e "$LOCAL_DATABASE"; then
              echo "The database $LOCAL_DATABASE created..."
            else echo "The database $LOCAL_DATABASE already exists..."
            fi
            if PGPASSWORD="odoo" pg_restore -h "$LOCAL_HOST" -U "$LOCAL_USER" -d "$LOCAL_DATABASE" -v "$LOCAL_DUMP_FILE"; then
                 
                 echo "Database restored successfully."
                 rm "$LOCAL_DUMP_FILE"
              else  echo "Database failed to be restored."
                    rm "$LOCAL_DUMP_FILE"
              fi
          else
            echo "The res_users table already exists in the base database. Skipping database restore."
          fi
        image: odoo:17
        imagePullPolicy: IfNotPresent
        name: db-restored
        volumeMounts:
        # Edit the volume to match the existing mountPaths in the cluster
        - mountPath: /var/lib/odoo
          name: vol-7xe3r
          subPath: odoo
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      containers:
      - env:
        - name: HOST
          value: db-base
        - name: PASSWORD
          value: odoo
        - name: USER
          value: odoo
        image: odoo:17
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 6
          httpGet:
            path: /web/health
            port: http
            scheme: HTTP
          initialDelaySeconds: 600
          periodSeconds: 300
          successThreshold: 1
          timeoutSeconds: 5
        ports:
        - containerPort: 8069
          name: http
          protocol: TCP
        startupProbe:
            failureThreshold: 3
            successThreshold: 1
            initialDelaySeconds: 0
            timeoutSeconds: 1
            periodSeconds: 10
            httpGet:
              path: /web/health
              port: http
              scheme: HTTP
        readinessProbe:
          failureThreshold: 6
          httpGet:
            path: /web/health
            port: http
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        name: odoo-base
        resources:
          requests:
            cpu: 100m
            memory: 512Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities: {}
          privileged: false
          readOnlyRootFilesystem: false
          runAsNonRoot: false
        stdin: true
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        tty: true
        ports:
            - containerPort: 8069
              name: http
              protocol: TCP
        volumeMounts:
        # Edit the volume to match the existing mountPaths in the cluster
        - mountPath: /var/lib/odoo
          name: vol-7xe3r
          subPath: odoo
        - mountPath: /mnt/extra-addons
          name: vol-7xe3r
          subPath: odoo/addons
        - mountPath: /etc/odoo
          name: config
      
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: stack
                operator: In
                values:
                - odoo
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
      volumes:
      - configMap:
          defaultMode: 509
          name: odoo-base.conf
          optional: true
        name: config
      # Edit the volume to match the existing pv in the cluster
      - name: vol-7xe3r
        persistentVolumeClaim:
          claimName: odoo-base

