apiVersion: v1
data:
  livenessProbe.sh: "#!/bin/bash\n\n# Copyright 2022 Splunk\n\n# Licensed under the
    Apache License, Version 2.0 (the \"License\");\n# you may not use this file except
    in compliance with the License.\n# You may obtain a copy of the License at\n#\n#
    \    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable
    law or agreed to in writing, software\n# distributed under the License is distributed
    on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
    express or implied.\n# See the License for the specific language governing permissions
    and\n# limitations under the License.\n#\n\n#This script is used to retrieve and
    report the state of the container\n#Although not actively in the container, it
    can be used to check the health\n#of the splunk instance\n#NOTE: If you plan on
    running the splunk container while keeping Splunk\n# inactive for long periods
    of time, this script may give misleading\n# health results\n\n# If exists, Source
    the liveness level\n#[[ -f /opt/splunk/etc/k8_liveness_driver.sh ]] && source
    /opt/splunk/etc/k8_liveness_driver.sh\n[[ -f $SPLUNK_OPERATOR_K8_LIVENESS_DRIVER_FILE_PATH
    ]] && source $SPLUNK_OPERATOR_K8_LIVENESS_DRIVER_FILE_PATH\n\n# Get the HTTP proto
    type\nget_http_proto_type() {\n    if [[ \"false\" == \"$SPLUNKD_SSL_ENABLE\"
    || \"false\" == \"$(/opt/splunk/bin/splunk btool server list | grep enableSplunkdSSL
    | cut -d\\  -f 3)\" ]]; then\n      echo \"http\"\n    else\n      echo \"https\"\n
    \   fi\n}\n\n# Check if the Splunkd process is running or not\nliveness_probe_check_splunkd_process()
    {\n  SPLUNK_PROCESS_ID=`ps ax | grep \"splunkd.*start\" | grep -v grep | head
    -1 | awk '{print $1}'`\n\n  #If NO_HEALTHCHECK is NOT defined, then we want the
    healthcheck\n  state=\"$(< $CONTAINER_ARTIFACT_DIR/splunk-container.state)\"\n
    \ case \"$state\" in\n  running|started)\n      if [[ \"\" != \"$SPLUNK_PROCESS_ID\"
    ]]; then\n         exit 0\n      fi\n\n      # Goes to the the pod event\n      echo
    \"Splunkd not running\"\n      exit 1\n  ;;\n  *)\n      exit 1\n  esac\n}\n\n#
    Default liveness probe checks for the mgmt port reachability\nliveness_probe_default()
    {\n    HTTP_SCHEME=$(get_http_proto_type)\n\n    #If NO_HEALTHCHECK is NOT defined,
    then we want the healthcheck\n    state=\"$(< $CONTAINER_ARTIFACT_DIR/splunk-container.state)\"\n\n
    \   case \"$state\" in\n    running|started)\n        curl --max-time 30 --fail
    --insecure $HTTP_SCHEME://localhost:8089/\n        if [[ $? == 0 ]]; then\n            exit
    0\n        fi\n\n        echo \"Mgmt. port is not reachable\"\n        exit 1\n
    \   ;;\n    *)\n        exit 1\n    esac\n}\n\nif [[ \"\" == \"$NO_HEALTHCHECK\"
    ]]; then\n    case $K8_OPERATOR_LIVENESS_LEVEL in\n    1)\n        liveness_probe_check_splunkd_process\n
    \   ;;\n    *)\n        liveness_probe_default\n    ;;\n    esac\n\nelse\n\t#If
    NO_HEALTHCHECK is defined, ignore the healthcheck\n\texit 0\nfi"
  readinessProbe.sh: |-
    #!/bin/bash

    # Copyright 2022 Splunk

    # Licensed under the Apache License, Version 2.0 (the "License");
    # you may not use this file except in compliance with the License.
    # You may obtain a copy of the License at
    #
    #     http://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing, software
    # distributed under the License is distributed on an "AS IS" BASIS,
    # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    # See the License for the specific language governing permissions and
    # limitations under the License.
    #

    #This script is used to retrieve and report the state of the container
    #Although not actively in the container, it can be used to check the health
    #of the splunk instance
    #NOTE: If you plan on running the splunk container while keeping Splunk
    # inactive for long periods of time, this script may give misleading
    # health results

    if [[ "" == "$NO_HEALTHCHECK" ]]; then
        # If liveness level level degraded, use the container state for the readiness probe(legacy logic)
        [[ -f $SPLUNK_OPERATOR_K8_LIVENESS_DRIVER_FILE_PATH ]] && source $SPLUNK_OPERATOR_K8_LIVENESS_DRIVER_FILE_PATH
        if [[ "1" == "$K8_OPERATOR_LIVENESS_LEVEL" ]]; then
           /bin/grep started /opt/container_artifact/splunk-container.state
           exit $?
        fi

        if [[ "false" == "$SPLUNKD_SSL_ENABLE" || "false" == "$(/opt/splunk/bin/splunk btool server list | grep enableSplunkdSSL | cut -d\  -f 3)" ]]; then
          SCHEME="http"
            else
          SCHEME="https"
        fi
            #If NO_HEALTHCHECK is NOT defined, then we want the healthcheck
            state="$(< $CONTAINER_ARTIFACT_DIR/splunk-container.state)"

            case "$state" in
            running|started)
                curl --max-time 30 --fail --insecure $SCHEME://localhost:8089/
                exit $?
            ;;
            *)
                exit 1
            esac
    else
            #If NO_HEALTHCHECK is defined, ignore the healthcheck
            exit 0
    fi
  startupProbe.sh: |-
    #!/bin/bash

    # Copyright 2022 Splunk

    # Licensed under the Apache License, Version 2.0 (the "License");
    # you may not use this file except in compliance with the License.
    # You may obtain a copy of the License at
    #
    #     http://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing, software
    # distributed under the License is distributed on an "AS IS" BASIS,
    # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    # See the License for the specific language governing permissions and
    # limitations under the License.
    #

    #This script is used to retrieve and report the state of the container
    #Although not actively in the container, it can be used to check the health
    #of the splunk instance
    #NOTE: If you plan on running the splunk container while keeping Splunk
    # inactive for long periods of time, this script may give misleading
    # health results

    if [[ "" == "$NO_HEALTHCHECK" ]]; then
        if [[ "false" == "$SPLUNKD_SSL_ENABLE" || "false" == "$(/opt/splunk/bin/splunk btool server list | grep enableSplunkdSSL | cut -d\  -f 3)" ]]; then
          SCHEME="http"
            else
          SCHEME="https"
        fi
            #If NO_HEALTHCHECK is NOT defined, then we want the healthcheck
            state="$(< $CONTAINER_ARTIFACT_DIR/splunk-container.state)"

            case "$state" in
            running|started)
                curl --max-time 30 --fail --insecure $SCHEME://localhost:8089/
                exit $?
            ;;
            *)
                exit 1
            esac
    else
            #If NO_HEALTHCHECK is defined, ignore the healthcheck
            exit 0
    fi
kind: ConfigMap
metadata:
  creationTimestamp: "2023-02-09T17:31:27Z"
  managedFields:
  - apiVersion: v1
    fieldsType: FieldsV1
    fieldsV1:
      f:data:
        .: {}
        f:livenessProbe.sh: {}
        f:readinessProbe.sh: {}
        f:startupProbe.sh: {}
    manager: manager
    operation: Update
    time: "2023-02-09T17:31:27Z"
  name: splunk-default-probe-configmap
  namespace: default
  uid: 4868c553-413c-433e-982b-ac2871492a62
